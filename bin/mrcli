#!/usr/bin/env php
<?php declare(strict_types=1);

foreach ([__DIR__ . '/../../../autoload.php', __DIR__ . '/../vendor/autoload.php'] as $file) {
    if (file_exists($file)) {
        require $file;
        break;
    }
}

use DanielPieper\MergeReminder\Command\ApproverCommand;
use DanielPieper\MergeReminder\Command\OverviewCommand;
use DanielPieper\MergeReminder\Command\ProjectCommand;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Output\OutputInterface;

$dotEnv = \Dotenv\Dotenv::create(__DIR__);
$dotEnv->safeLoad();
$dotEnv->required(['GITLAB_TOKEN'])->notEmpty();

$container = new \League\Container\Container();
$container->add('SLACK_WEBHOOK_URL', getenv('SLACK_WEBHOOK_URL'));
$container->add('SLACK_CHANNEL', getenv('SLACK_CHANNEL'));
$container->add('GITLAB_TOKEN', getenv('GITLAB_TOKEN'));
$container->add('GITLAB_URL', (getenv('GITLAB_URL') ? getenv('GITLAB_URL') : 'https://gitlab.com'));
$container
    ->addServiceProvider(\DanielPieper\MergeReminder\ServiceProvider\GitlabServiceProvider::class)
    ->addServiceProvider(\DanielPieper\MergeReminder\ServiceProvider\SlackServiceProvider::class)
    ->addServiceProvider(\DanielPieper\MergeReminder\ServiceProvider\AppServiceProvider::class);

$app = new Application('mrcli', '1.0.0');
$app->add($container->get(OverviewCommand::class));
$app->add($container->get(ProjectCommand::class));
$app->add($container->get(ApproverCommand::class));
$app->run(null, $container->get(OutputInterface::class));
